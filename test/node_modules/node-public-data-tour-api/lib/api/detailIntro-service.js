"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detailIntro = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../utils/constants");
const customAxios_1 = __importDefault(require("../utils/customAxios"));
const detailIntro = ({ language, numOfRows, pageNo, MobileOS, MobileApp, ServiceKey, contentId, contentTypeId, timeout = 3000, }) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const url = (0, constants_1.getServiceUrl)({ language, service: "detailIntro1" });
        const { data: { response: { header: { resultCode, resultMsg }, body: { items, numOfRows: _numOfRows, pageNo: _pageNo, totalCount }, }, }, status, statusText, } = yield customAxios_1.default.get(url, {
            params: {
                numOfRows,
                pageNo,
                MobileOS,
                MobileApp,
                ServiceKey,
                contentId,
                contentTypeId,
                _type: "json",
            },
            timeout,
        });
        if (status === 200) {
            return {
                resultCode,
                resultMsg,
                items,
                numOfRows: _numOfRows,
                pageNo: _pageNo,
                totalCount,
            };
        }
        throw new Error(`${status}: ${statusText}`);
    }
    catch (err) {
        if (axios_1.default.isAxiosError(err)) {
            throw new Error(`${err.code}: ${err.message}`);
        }
        else {
            throw err;
        }
    }
});
exports.detailIntro = detailIntro;
//# sourceMappingURL=detailIntro-service.js.map